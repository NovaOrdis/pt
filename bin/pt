#!/bin/bash

f=$(dirname $0)/../lib/std.shlib; [ -f ${f} ] && . ${f} || { echo "${f} not found, $(basename $0) incorrectly installed" 1>&2; exit 1; }
f=$(dirname $0)/../lib/pt.shlib; [ -f ${f} ] && . ${f} || { echo "${f} not found, $(basename $0) incorrectly installed" 1>&2; exit 1; }

function main() {

    local command=""
    while [ -n "$1" ]; do
        if [ -z "${command}" ]; then
            command=$1
        fi
        shift
    done

    [ -z "${command}" ] && { pt-help; exit 0; }

    #
    # required environment variables
    #

    local jboss_home
    jboss_home=$(get-jboss-home)

    #
    # execute the command
    #

    do-${command} "${jboss_home}"
}

function do-reset() {

    local jboss_home=$1
    [ -z "${jboss_home}" ] && fail "'jboss_home' not provided"

    if ! stop-jboss; then
        warn "the JBoss instance was not running, continuing the environment reset process ..."
    fi

    local local jboss_log_dir="${jboss_home}/standalone/log"

    if ! remove-files "${jboss_log_dir}"; then
        warn "no files were found in ${jboss_log_dir}, so no logs will be removed, continuing the environment reset process ..."
    fi

    if ! start-jboss; then
        fail "the JBoss instance was supposed to be stopped, but we found it running ..."
    fi
}

#
# Collects all relevant data (configuration, logs, etc) and places a zip file in the data directory provided
# as the value of the PT_DATA_DIR environment variable.
#
function do-collect() {

    [ -z "${PT_DATA_DIR}" ] && fail "required 'PT_DATA_DIR' environment variable not set"
    local data_dir="${PT_DATA_DIR}"
    [ -d "${data_dir}" ] || fail "the target data directory ${data_dir} is not a valid directory"
}

function do-test() {

    local jboss_home=$1
}

main $@

#data_dir="/c/ovidiu/data"
#
#
#function export-data() {
#
#    local jboss_home=$1
#    local target_dir=$2
#
#    local dir_name="load-data-"$(date +'%y-%m-%d-%H-%M-%S')
#    local dir_path="${target_dir}/${dir_name}"
#    mkdir "${dir_path}" && echo "created ${dir_name}" || exit 1
#
#    local access_log_file=${jboss_home}/standalone/log/access_log.log
#    cp "${access_log_file}" "${dir_path}" && echo "copied "$(basename "${access_log_file}") || exit 1
#
#    local access_log_def_file_name=$(basename "${access_log_file}" .log).def
#
#    #
#    # copy the access log definition
#    #
#    local config_file=${jboss_home}/standalone/configuration/standalone-pi-mssql-ha-tcp.xml
#
#    local access_log_format
#    access_log_format=$(grep "<access-log pattern=" "${config_file}") || exit 1
#    access_log_format=${access_log_format#*<access-log pattern=\"}
#    access_log_format=${access_log_format%\"/>}
#    echo ${access_log_format} > "${dir_path}/${access_log_def_file_name}" && echo "access log definition written in ${access_log_def_file_name}"
#    (cd "${dir_path}"; zip -r ../${dir_name}.zip *) && echo "packaged data as ${dir_name}.zip" || exit 1
#    rm -r "${dir_path}" && echo "removed ${dir_path}" || exit 1
#}
#
#function status() {
#
#    local jboss_home=$1
#
#    local java_pid=$(get-java-pid) || exit 1
#    local p=$(linux-to-win-path "${jboss_home}")
#
#    echo ""
#    echo "JBOSS_HOME ${p}"
#
#    if [ -z "${java_pid}" ]; then
#        echo "no java process found"
#    else
#        echo "java (PID ${java_pid}) running"
#    fi
#
#    local log_dir=$(linux-to-win-path "${jboss_home}/standalone/log")
#
#    echo "log files:"
#    for lf in $(dir "${log_dir}"); do
#        echo "    ${lf}"
#    done
#}
#

